// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WinForms;

#nullable disable

namespace WinForms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230624204821_InitCreate")]
    partial class InitCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WinForms.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerWord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("QuestionOneAnswerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionOneAnswerId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("WinForms.Models.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAplied")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("WinForms.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("WinForms.Models.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("WinForms.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionOneAnswerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionOneAnswerId")
                        .IsUnique();

                    b.ToTable("Question");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WinForms.Models.QuestionOneAnswer", b =>
                {
                    b.HasBaseType("WinForms.Models.Question");

                    b.Property<int?>("ExamId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("RightAnswer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("isAnswered")
                        .HasColumnType("tinyint(1)");

                    b.HasIndex("ExamId");

                    b.HasDiscriminator().HasValue("QuestionOneAnswer");
                });

            modelBuilder.Entity("WinForms.Models.Answer", b =>
                {
                    b.HasOne("WinForms.Models.QuestionOneAnswer", "QuestionOneAnswer")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionOneAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOneAnswer");
                });

            modelBuilder.Entity("WinForms.Models.Mark", b =>
                {
                    b.HasOne("WinForms.Models.Applicant", "Applicant")
                        .WithOne("ExamMark")
                        .HasForeignKey("WinForms.Models.Mark", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("WinForms.Models.Question", b =>
                {
                    b.HasOne("WinForms.Models.QuestionOneAnswer", "QuestionOneAnswer")
                        .WithOne("Question")
                        .HasForeignKey("WinForms.Models.Question", "QuestionOneAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOneAnswer");
                });

            modelBuilder.Entity("WinForms.Models.QuestionOneAnswer", b =>
                {
                    b.HasOne("WinForms.Models.Exam", "Exam")
                        .WithMany("QuestionsOneAnswer")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("WinForms.Models.Applicant", b =>
                {
                    b.Navigation("ExamMark");
                });

            modelBuilder.Entity("WinForms.Models.Exam", b =>
                {
                    b.Navigation("QuestionsOneAnswer");
                });

            modelBuilder.Entity("WinForms.Models.QuestionOneAnswer", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Question")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
